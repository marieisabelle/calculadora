name: Deploy Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Login no DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build da imagem Docker
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/calculadora:latest .

      - name: Push para DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/calculadora:latest
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Build
        run: npm run build
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Start EC2 Instance
        id: ec2
        run: |
          INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 start-instances --instance-ids $INSTANCE_ID
          echo "Esperando instÃ¢ncia iniciar..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "EC2_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "/home/ec2-user/calculadora"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            if ! command -v docker &> /dev/null; then
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
            fi
            cd /home/ec2-user/calculadora
            bash deploy.sh

      - name: Stop EC2 Instance
        if: always()
        run: |
          INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 stop-instances --instance-ids $INSTANCE_ID